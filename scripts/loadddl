#!/usr/bin/python

import lib.common as common
import fnmatch
import os
import sys
import shutil
import tempfile
import zipfile

def validate_command_line_arguments(args):
  '''
  Check that 2 command line arguments are present and that they both specify valid paths. Raise an exception otherwise
  '''
  if len(args) != 3:
    raise Exception('Error - incorrect number of arguments: 2 expected, ' + str(len(args) - 1) + ' present')
  if not os.path.isdir(args[1]):
    raise Exception('Error - path not found: ' + args[1])
  if not os.path.isfile(os.path.join(args[1], 'deployment.xml')):
    raise Exception('Error - deployment.xml not found: ' + os.path.join(args[1], 'deployment.xml'))
  if not os.path.isfile(os.path.join(args[1], 'other-configuration.yaml')):
    raise Exception('Error - other-configuration.yaml not found: ' + os.path.join(args[1], 'other-configuration.yaml'))
  if not os.path.isfile(args[2]):
    raise Exception('Error - could not find source file: ' + args[2])
  (_, ext) = os.path.splitext(args[2])
  if not ext.lower() in ['.zip', '.jar', '.sql']:
    raise Exception('Error - source file must be a sql, jar or zip file')
  print('Command line arguments validated')

def check_voltdb_is_running(dir_path, other_configuration):
  '''
  Attempt to execute a system stored procedure on the VoltDB using the port specified in the YAML configuration file via
  sqlcmd. Raise an exception if the sqlcmd return code is non-zero.
  '''
  check_cmd = 'echo "exec @SystemInformation OVERVIEW" | sqlcmd --port={client} >> {dir_path}/log/loadddl.log' \
      .replace('{client}', str(other_configuration['ports']['client'])) \
      .replace('{dir_path}', dir_path) \
      .strip()
  os.chdir(dir_path)
  if common.__shexec(check_cmd) == 0:
    print('VoltDB appears to be running normally')
  else:
    raise Exception('Error, unable to connect to VoltDB client port')

def apply_source_file(dir_path, source_filepath, other_configuration):
  '''
  Applies a SQL file to a VoltDB via sqlcmd. If a jar or zip file is provided instead it will extract any SQL files
  from that jar file and process them one by one, in alphabetic order
  '''
  (_, ext) = os.path.splitext(source_filepath)
  if ext.lower() in ['.sql']:
    __apply_sql_source_filepath(dir_path, source_filepath, other_configuration)
  elif ext.lower() in ['.zip', '.jar']:
    __apply_jarzip_source_filepath(dir_path, source_filepath, other_configuration)
  else:
    raise Exception('Error - source file must be a sql, jar or zip file')
  print('All source files applied, DDL load complete')

def __apply_jarzip_source_filepath(dir_path, source_filepath, other_configuration):
  sql_files = []
  tmpdirname = tempfile.mkdtemp()
  with zipfile.ZipFile(source_filepath, 'r') as source_archive:
    source_archive.extractall(tmpdirname)
    for sql_file in __locate("*.[sS][qQ][lL]", tmpdirname):
      sql_files.append(sql_file)
    sql_files.sort()
  if len(sql_files) == 0:
    raise Exception('No SQL files found in ' + source_filepath)
  else:
    for sql_file in sql_files:
      __apply_sql_source_filepath(dir_path, sql_file, other_configuration)

def __apply_sql_source_filepath(dir_path, source_filepath, other_configuration):
  apply_cmd = 'sqlcmd --port={client} < "{source_filepath}" >> {dir_path}/log/loadddl.log 2>&1' \
      .replace('{dir_path}', dir_path) \
      .replace('{client}', str(other_configuration['ports']['client'])) \
      .replace('{source_filepath}', source_filepath) \
      .strip()
  os.chdir(dir_path)
  return_code = common.__shexec(apply_cmd)
  if return_code == 0:
    print('Applied ' + source_filepath + ' to VoltDB')
  else:
    raise Exception('Error - could not apply ' + source_filepath + ' to VoltDB. Error code: ' + str(return_code))

def __locate(pattern, root=os.curdir):
    '''
    Locate all files matching supplied filename pattern in and below supplied root directory.
    Source: https://code.activestate.com/recipes/499305-locating-files-throughout-a-directory-tree/
    '''
    for path, dirs, files in os.walk(os.path.abspath(root)):
        for filename in fnmatch.filter(files, pattern):
            yield os.path.join(path, filename)

if __name__ == '__main__':
  validate_command_line_arguments(sys.argv)
  other_configuration = common.load_configuration(sys.argv[1])
  check_voltdb_is_running(sys.argv[1], other_configuration)
  apply_source_file(sys.argv[1], sys.argv[2], other_configuration)

