#!/usr/bin/python

import lib.common as common
import itertools
import os
import shutil
import sys
import time

def validate_command_line_arguments(args):
  '''
  Check that only one command line argument is present and that it specifies a valid path. Raise an exception otherwise
  '''
  if len(args) != 2:
    raise Exception('Error - incorrect number of arguments: 1 expected, ' + str(len(args) - 1) + ' present')
  if not os.path.isdir(args[1]):
    raise Exception('Error - path not found: ' + args[1])
  if not os.path.isfile(os.path.join(args[1], 'deployment.xml')):
    raise Exception('Error - deployment.xml not found: ' + os.path.join(args[1], 'deployment.xml'))
  if not os.path.isfile(os.path.join(args[1], 'other-configuration.yaml')):
    raise Exception('Error - other-configuration.yaml not found: ' + os.path.join(args[1], 'other-configuration.yaml'))
  print('Command line arguments validated')

def check_thp_disabled():
  '''
  Check that transparent huge pages are disabled (Volt won't start if they aren't)
  '''
  enabled_cmd = 'grep \'\\[never\\]\' /sys/kernel/mm/transparent_hugepage/enabled > /dev/null'
  defrag_cmd = 'grep \'\\[never\\]\' /sys/kernel/mm/transparent_hugepage/defrag > /dev/null'
  if common.__shexec(enabled_cmd, True) != 0 or common.__shexec(defrag_cmd, True) != 0:
    print('Error - THP must be disabled for VoltDB to safely, try running the following commands:')
    print('  sudo bash -c "echo never > /sys/kernel/mm/transparent_hugepage/enabled"')
    print('  sudo bash -c "echo never > /sys/kernel/mm/transparent_hugepage/defrag"')
    raise Exception('Error - THP must be disabled for VoltDB to safely execute, see suggested commands printed above')
  print('Checked transparent huge pages are disabled')


def kill_db(dir_path):
  deployment_filepath = os.path.join(dir_path, 'deployment.xml')
  log_filepath = os.path.join(dir_path, 'log', 'volt.log')
  kill_cmd = 'pkill -f ' + deployment_filepath + ' >> {log_filepath} 2>&1' \
      .replace('{log_filepath}', log_filepath) \
      .strip()
  common.__shexec(kill_cmd)
  print('Existing DB, if any, using ' + deployment_filepath + ' killed');

def clear_db_folder(dir_path):
  '''
  Removes all DB files from the specified DB folder
  '''
  if os.path.exists(os.path.join(dir_path, 'log')):
    shutil.rmtree(os.path.join(dir_path, 'log'))
  if os.path.exists(os.path.join(dir_path, 'voltdbroot')):
    shutil.rmtree(os.path.join(dir_path, 'voltdbroot'))
  print('log and voltdbroot directories removed from ' + dir_path + ' if present')

def start_db_creation(dir_path, other_configuration):
  '''
  Call voltdb create with the appropriate parameters
  '''
  mkdir_cmd = 'mkdir -p ' + os.path.join(dir_path, 'log')

  pref = 'nohup env'
  heap = 'VOLTDB_HEAPMAX=\'{heap}\'' \
    .replace('{heap}', str(other_configuration['voltdb_heapmax'])) \
    .strip()
  opts = 'VOLTDB_OPTS=\'-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address={debug}\'' \
    .replace('{debug}', str(other_configuration['ports']['debug'])) \
    .strip()
  binary = os.path.join(other_configuration['voltdb_bindir'], 'voltdb create')
  depl = '--deployment=' + os.path.join(dir_path, 'deployment.xml')
  lic = '' if not other_configuration['license_filepath'] else '--license=' + other_configuration['license_filepath']
  host = '--host=' + other_configuration['host']
  admin = '--admin=' + str(other_configuration['ports']['admin'])
  client = '--client=' + str(other_configuration['ports']['client'])
  http = '--http=' + str(other_configuration['ports']['http'])
  internal = '--internal=' + str(other_configuration['ports']['internal'])
  repl = '--replication=' + str(other_configuration['ports']['replication'])
  zoo = '--zookeeper=' + str(other_configuration['ports']['zookeeper'])
  suff = '>> ' + os.path.join(dir_path, 'log', 'createclean.log') + ' 2>&1 &'
  db_cmd = '{pref} {heap} {opts} {binary} {depl} {lic} {host} {admin} {client} {http} {internal} {repl} {zoo} {suff}' \
      .replace('{pref}', pref) \
      .replace('{heap}', heap) \
      .replace('{opts}', opts) \
      .replace('{binary}', binary) \
      .replace('{depl}', depl) \
      .replace('{lic}', lic) \
      .replace('{host}', host) \
      .replace('{admin}', admin) \
      .replace('{client}', client) \
      .replace('{http}', http) \
      .replace('{internal}', internal) \
      .replace('{repl}', repl) \
      .replace('{zoo}', zoo) \
      .replace('{suff}', suff) \
      .strip()
  os.chdir(dir_path)
  common.__shexec(mkdir_cmd)
  common.__shexec(db_cmd)
  print('DB startup initiated')

def wait_for_database_to_start(dir_path, delay):
  '''
  Check the log 10 times whether or not it contains "Server completed initialization", waiting {delay} seconds
  before the first check and between each check
  '''
  log_filepath = os.path.join(dir_path, 'log', 'volt.log')
  grep_cmd = 'grep \'Server completed initialization\' {log_filepath} > /dev/null' \
    .replace('{log_filepath}', log_filepath) \
    .strip()
  for _ in itertools.repeat(None, 10):
    print 'Checking if initialisation has completed...'
    time.sleep(delay)
    if common.__shexec(grep_cmd, True) == 0:
      print '... Server initialization completed'
      return True
  print(' ... WARNING: DB initialisation does not appear to have completed after ' + str(10 * delay) + ' seconds')
  print(' ... Please check the {log_filepath}') \
      .replace('{log_filepath}', log_filepath) \
      .strip()
  return False

if __name__ == '__main__':
  validate_command_line_arguments(sys.argv)
  other_configuration = common.load_configuration(sys.argv[1])
  check_thp_disabled()
  kill_db(sys.argv[1])
  clear_db_folder(sys.argv[1])
  start_db_creation(sys.argv[1], other_configuration)
  wait_for_database_to_start(sys.argv[1], other_configuration['check_delay'])

